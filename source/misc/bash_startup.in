# This is inspired by "preexec.bash" but is customized for iTerm2. Sourced, so
# no shebang. This module requires 2 bash features you must not otherwise be
# using: the DEBUG trap and the PROMPT_COMMAND variable.

osc='\033]'; cso='\007' # Beginning, ending escape sequences.

# tmux / screen are not supported; I think this is the theoretical tmux hack?
[ $TERM = screen ] && osc='\033Ptmux;\033\033]' && cso='\007\033\\'

orig_ps1=$PS1; prev_ps1=$PS1 # orig is the user-set PS1; prev is our last PS1.
preexec_interactive_mode= # If set: "just executed prompt; waiting for input."

[ -z "$iterm2_hostname" ] && iterm2_hostname=$(uname -n) # hostname -f == slow

# Usage: iterm2_set_user_var key value
iterm2_set_user_var(){
  var=$1; shift; val="$*"
  printf $osc'1337;SetUserVar=%s=%s'$cso "$var" "$val"
  unset var; unset val
}

# Users can write their own version of this method. It should call
# iterm2_set_user_var but not produce any other output. # [ Huh? ]
iterm2_print_user_vars() { :; }

iterm2_print_version_number() {
  printf $osc'1337;ShellIntegrationVersion=1'$cso
}

iterm2_print_state_data() {
  printf $osc'1337;RemoteHost=%s@%s'$cso "$USER" "$iterm2_hostname"
  printf $osc'1337;CurrentDir=%s'$cso "$PWD"
  iterm2_print_user_vars
}

iterm2_prompt_prefix () {
  printf $osc'133;D;'$?$cso
  iterm2_print_state_data
  printf $osc'133;A'$cso
}

iterm2_prompt_suffix() {
  printf $osc'133;B'$cso
}

preexec() {
  printf $osc'133;C'$cso
}

# This function is installed as bash PROMPT_COMMAND; invoked before each
# interactive prompt display. It sets preexec_interactive_mode for DEBUG trap.
iterm2_preexec_invoke_cmd() {
  status=$?
  last_command="$(echo $(fc -ln | tail -1))"; (exit $status) # Reset $? back.

  PS1="\[$(iterm2_prompt_prefix)\]$orig_ps1\[$(iterm2_prompt_suffix)\]"
  prev_ps1=$PS1; (exit $status) # Save PS1 in case user changes PS1; reset $?.

  preexec_interactive_mode=yes # This must be the last line in this function.
}

# This function is the DEBUG trap. It inspects the current environment, and
# if it is ready to be invoked interactively, it 'preexec's the command line.
iterm2_preexec_invoke_exec() {
  [ ! -t 1 ] && return # We're in a piped subshell (STDOUT is not a TTY).
  [ -n "$COMP_LINE" ] && return    # We're in the middle of a completion.
  [ -z "$preexec_interactive_mode" ] && return # We're displaying prompt.
  [ -"$BASH_SUBSHELL"- = -"0"- ] && preexec_interactive_mode=
  [ -"iterm2_preexec_invoke_cmd"- = -"$BASH_COMMAND"- ] &&
                              preexec_interactive_mode= && return

  fc=$(echo $(fc -ln | tail -1)); prev_fc=$last_fc; last_fc=$fc
  [ x"$prev_fc" != x"$fc" ] && this_command=$fc || this_command=

  preexec "$this_command"
}

iterm2_preexec_install() {
  [ -z "$BASH" ] && set -o functrace  >/dev/null 2>&1 &&
                    shopt -s extdebug >/dev/null 2>&1

  PROMPT_COMMAND=iterm2_preexec_invoke_cmd
  trap 'iterm2_preexec_invoke_exec' DEBUG
}

[ $TERM != screen ] && # This needs to be disabled? Won't it just, not work?
  case $- in  # Portable way to check if we're in an interactive login shell.
    *i*) iterm2_preexec_install
         iterm2_print_state_data
         iterm2_print_version_number
         ;;
      *) :
         ;;
  esac

