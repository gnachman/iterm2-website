2024-04-15: Fix formatting of 24 hour time in context menu.
When you select an already-formatted date, convert it to
unix timestamp. Issue 11414

2024-04-15: Fix a bug where SCPFile's performOnMainThread
didn't block, causing fingerprint and other checks to return
wrong results. Luckily the bug causes connection failures
only. Issue 11413

2024-04-15: Keep a stack of hosts and the key mode for each,
saved just before a new host begins. Restore key mode when
an old host resumes. Issue 11412

2024-04-14: Make search bergin at the find cursor and stop
when it wraps back around to it. This greatly improves the
'search for smart selection results' feature when scrolled
up

2024-04-14: Fix crash in Find All Smart Selection Matches
when using default rules

2024-04-13: Add Find Visible Smart Selection Actions

2024-04-13: Fix bugs in select URLs with selected command
missing things

2024-04-13: Fix warnings

2024-04-13: Env PATH is unset and we want to append the
utilities folder to it use PATH_STDPATH rather than
PATH_DEFPATH because the former omits sbin. Issue 11406

2024-04-12: Deselect selected command on double (or more)
click

2024-04-12: Don't crash when a compressed character buffer
contains an empty block. Issue 11243

2024-04-12: Increase max searchable line length from 500k to
30M

2024-04-12: Don't preserve LineBlock guid when copying a
block. Try to fix crash in 11405

2024-04-12: Fix assertion failure when capturing a GPU frame
if the destination is not 8 bits per sample (seems to happen
with GPU debugging)

2024-04-12: Fix broadcast stripes being backwards in GPU
renderer

2024-04-12: Fix drawing issues with offscreen command line
and top margin. Issue 11401

2024-04-12: Make auto composer keystrokes take precedence
over all text-sending and navigation shortcuts

2024-04-08: Fix some bugs with filtering. Issue 10637

2024-04-04: Clean up of various things related to selected
commands. Fix bugs, including various races and drawing
problems, add logging.

2024-04-02: Fix drawing with selected command

2024-03-28: Suppress drawing buttons under auto composer

2024-03-28: Fix vertical position of selected command
outline

2024-03-28: Don't draw background color in auto composer
prompt

2024-03-28: Fix rendering discrepancies in terminal buttons
bewteen renderers

2024-03-27: Add the concept of a selected command. Draw a
blue box around it and dim the background of other regions.
If there's a line-style mark just below the blue box shift
buttons down a touch so they don't intersect.

Limit search to the selected command.

Other changes: Fix data race with terminal buttons being
used in metal thread.

Focus auto composer when you type or paste (or it changes
for any other reason).

2024-03-19: Make minimum contrast apply to box drawing
characters that are not block-like. Issue 6993

2024-03-19: Try to fix crash in issue 11396

2024-03-18: Update tips of the day

2024-03-17: When the command prompt appears only make auto
composer first responder if the session was already first
responder

2024-03-17: Add missing header

2024-03-17: Add onboarding images

2024-03-17: Rebuild binary deps for xcode 15.3

2024-03-17: Don't show completions in composer if there are
none to show. Do show executable completions if the prefix
looks like a path

2024-03-17: Bump shell integration with suggestion from
issue 11392

2024-03-17: Remove recents if the advanced setting is off.
Issue 11198

2024-03-16: Change how terminal buttons positions are
stored. Don't store the abs coord in the button since it's
sensitive to resizing. Instead, calculate it from the mark
each time.

2024-03-15: Make line style mark buttons stick to the right
side

2024-03-12: When the composer is open (auto or standard
large minimal composer) add PTYTextView to the responder
chain after it so menu items continue to work

2024-03-12: Respect key bindings in auto composer, except
those that send text on navigationy keys like arrows

2024-03-12: Fix a bug where the composer manager would get
stuck as autocomposer after disabling the setting

2024-03-12: Remove drag handles from auto composer

2024-03-12: Improve composer suggestions. Don't complete
filenames for first word of a command. Get more results,
variable number depending on ssh and whether a list of files
was requested by the user or is happening automatically.
Forward keystrokes from popup to minimal composer vc.

2024-03-12: Improve composer completions. Press tab to get a
popup of filename/command completions.

2024-03-12: Keep auto composer as first responder when you
click in a text field.

2024-03-12: Ensure the line buffer doesn't have empty blocks
at the end when beginning a resize because popping fails
when there is a terminal empty block. Issue 11391

2024-03-11: Really fix bugs with terminal buttons. Drawing
helper had outdated cached metrics when updating button
desired frames.

2024-03-11: Fix incorrect underline vertical offset when
glyph size != cell size. Issue 11386

2024-03-11: Fix bug where terminal buttons would disappear
when there's scrollback overflow

2024-03-07: Fix warnings

2024-03-06: Set TERM_FEATURES

2024-03-06: Fix bug where a letter after an image corrupted
a cell of the image

2024-03-05: Remove old onboarding images

2024-03-05: Update onboarding

2024-03-05: Fix nil dereference when computing offscreen
command line

2024-03-05: Log key-up

2024-03-05: Add tool to extract input bytes from debu glog

2024-03-04: Update control after canceling changing a
setting that warns you that the setting is dumb. Issue 11373

2024-03-04: Add neovim icon. Issue 11384

2024-03-02: Fix colors in banners and related drawing.

2024-03-02: Queue input while connecting to SSH. Issue 11378

2024-03-02: Make search and filter status bar components use
large controls if space permits

2024-03-02: Store snippets in a plist file rather than user
defaults because there's a 4 meg limit on user defaults

2024-03-02: Allow manual input source changes to stick when
force keyboard is on. Issue 11356

2024-03-02: Accept control- to close find view. Issue 11383

2024-03-02: Fix infinite recursion. Issue 11379. Also fix a
bug where windowed ranges sometimes used -1,-1 for the
window; that confuses the text extract, which expects 0,0
for when there is no window.

2024-03-01: Add missing files

2024-03-01: Optimize the dickens out of token processing.

The great multithreadization and introduction of history
compression introduced a ton of overhead, which this commit
fixes.

* Remove support for compression. The abstraction was just
too expensive.  * Replace compressible character buffer with
an objc class to encapsulate an array of characters.  *
Optimize line block observers by replacing them with
generation counts.  * Add gobs of microoptimizations, mostly
replacing Swift with ObjC or C++. Swift is a much better
language than both, but it you care about performance it's
just not ready for prime time yet.

2024-03-01: Don't extract text in codecierge if it's not
enabled
