2025-07-26: Fix location where we copy hudsucker to

2025-07-26: Fix a bug where setting a making a dynamic
profile rewritable hit an assertion

2025-07-26: Extend background color into margins outside
alternate screen mode. The previous behavior of extending
the background color into the minimal theme's chrome remains
only in soft alternate screen mode. Issue 12355

2025-07-24: Copy libhudsucker dylib into bundle

2025-07-24: fix typo (#519)


2025-07-24: Remove bogus dylib from project

2025-07-24: Add support for global search to the browser.
Improve efficiency of protocol between js and swift

2025-07-22: refactor global search

2025-07-22: Integrate browser search more with built-in
search. Regex now works. And it can expand sections as
needed to reveal hidden results

2025-07-22: Move find functionalaity into javascript

2025-07-22: Make browser find manager mainactor

2025-07-22: Make the webview first responder, not the view
controller. This makes selections blue rather than gray

2025-07-22: Add a few files that were missed in the last
commit

2025-07-21: Add comprehensive AI-browser integration with
customizable system prompts

This major feature enhancement introduces deep integration
between AI chat and browser functionality, enabling AI to
interact with web pages as first-class citizens alongside
terminal sessions.

Key Features: - AI Browser Commands: New functions for web
interaction (find_on_page, load_url, web_search,
get_current_url, read_web_page) - Markdown Conversion:
JavaScript-based page-to-markdown conversion using Turndown
library with media stripping and chrome skipping -
Customizable AI Prompts: Multiple prompt templates for
different AI contexts (chat-only, terminal access, browser
access, combined permissions) - Enhanced Chat System:
Support for both terminal and browser session linking with
improved database schema - Reader Mode Integration: Advanced
markdown conversion for AI processing of web content -
Improved Focus Management: Enhanced focus-follows-mouse with
@MainActor thread safety

Technical Improvements: - Added browser permission category
actInWebBrowser for fine-grained AI control - Enhanced
preference UI with prompt selector and help documentation -
Improved geolocation handler with proper async/await
patterns

2025-07-21: Change control to set AI API key to a button and
an alert instead of trying to make a secure text field do
the job. It was too messy to make it work while not also
reading from the keychain when opening settings.

2025-07-21: Avoid reading from keychain when opening
settings

2025-07-21: Copy libhudsucker_ffi.dylib to Frameworks

2025-07-21: Enable browser profiles by default

2025-07-21: Fix absolute path in libhudsucker_ffi.dylib that
broke loading

2025-07-20: Draw cursor guide over text when native
powerline glyphs are enabled. Issue 12348

2025-07-20: Match APS job rule against full command line as
well as simple job name. Issue 9467

2025-07-20: Ignore logprobs which is an array

2025-07-20: Make ad blocker more aggressive

2025-07-19: Remove code that cleaned up active page contexts
for local pages because the nav callbacks don't happen
reliably. Fix a bug where rust adblocking didn't listen to
the right user defaults key

2025-07-19: Add the proxy as a trusted ca

2025-07-18: Revert hudsucker debug code

2025-07-18: Try to fix Google not working

Really delete good-adblock-rust

Really remove swift-nio

Navigation succeeds

Working with real proxy

Working with real proxy

IT WORKED

Works with iTermBrowserWebView

Works

Works

Works

Works

Works

Works

Works

Works

Works

Works

Works

Works

Works

Works

Works

Works

Works

Works

Works

Works

works

works

2025-07-17: Add certificate bypass when using proxy

2025-07-17: Fix a hang when using the jobs tool and a job is
super long

2025-07-17: Start on cert error bypass logic

2025-07-17: Move html out of hudsucker-ffi

2025-07-17: Replace my proxy with hudsucker, a much better
proxy someone else maintains

2025-07-15: Add extensions to profile preferences and expose
in settings for debug builds

2025-07-15: Tweak API of registry

2025-07-15: Don't let background scripts sendMessage to
content scripts

2025-07-15: Don't use uuid for browser extension id. Fix
various bugs in message sending

2025-07-15: Switch extension ID to a hash of the path

2025-07-15: Convert extension ID to a non uuid struct

2025-07-15: Fix bugs in kvstore db and make db methods
throwable

2025-07-15: Reorg extension handling

2025-07-15: Make webviews inspectable

2025-07-15: Reduce logging level of autofill detector

2025-07-15: Fix sending of messages to pass around encoded
value only. Fix problems in storage-ui-demo

2025-07-15: Add support for chrome storage APIs. Do cleanup
and refactoring along the way.

2025-07-15: Add support for permissions in manifests

2025-07-10: Don't add snippets with tags to the root of
menus. Issue 12326

2025-07-10: Fix a bug that broke it2copy. Issue 12327

2025-07-10: Bump shell integration

2025-07-10: Don't draw iTermMTKView if it has no window. Add
some debug logging

2025-07-10: Cache vectorized colorspace-converted colors to
improve CPU utiliztion with metal renderer

2025-07-10: Fix a bug where animated dismissal of a composer
might leave an invisible composer view in the view hierarchy
and nil out _minimalViewComposer causing another to be added
later. Issue 12329

2025-07-09: Fix building ModernTests target

2025-07-09: Fix incorrect cursor smear animation

2025-07-09: Disable asan in xcodebuild command line

2025-07-09: Fix a crash when using the named marks tool

2025-07-09: Fix a bug where fold to named mark would pick
the first one with a given name rather than the last one
with that name. Also fix that it picks the wrong screen line
for the collapsed state. Issue 12341

2025-07-09: Expand tildes in autolog paths

2025-07-09: Integrate content manager and add
iterm2-about:dev

2025-07-09: Fix content manager bugs

2025-07-09: Extract JavaScript code from Swift files to
separate resource files

- Move large JavaScript blocks from Swift string literals to
separate .js files - Create dom-nuke.js for DOM globals
removal from background scripts - Create console-override.js
for console.log interception - Create
content-script-injector.js for content script injection
logic - Create chrome-runtime-api.js for Chrome runtime API
setup - Create onmessage-listeners.js for message listener
management - Add BrowserExtensionTemplateLoader for loading
JavaScript resources - Update Package.swift to bundle
JavaScript resources - Update Swift code to use template
loader instead of inline JavaScript

Note: Tests currently fail due to resource bundling issue
that needs investigation

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-09: Add BrowserExtensionUserContentManager with
comprehensive tests

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-09: Add background script support with DOM isolation
and console handling

2025-07-09: Fix content world bugs

2025-07-09: Implement chrome.runtime.sendMessage and
onMessage APIs with full type safety

This adds comprehensive Chrome extension messaging support
with proper handling of null, undefined, and all
JSON-serializable types through a robust encoding system
that maintains compatibility with Chrome and Firefox
extension APIs.

**Architecture decisions:**

- **BrowserExtensionEncodedValue**: Created custom encoding
system because Chrome
  extension messaging only supports JSON-compatible types,
  but JavaScript needs to distinguish between null,
  undefined, Date objects, etc. The encoding uses `{value:
  "null|undefined"}` for special cases and `{json: "..."}`
  for everything else.

- **Type-safe protocol design**:
BrowserExtensionJSONRepresentable ensures all
  handler return types can be safely encoded, preventing
  runtime encoding failures and maintaining Swift's type
  safety guarantees.

- **Separate message handlers**: Split API requests
(BrowserExtensionAPIRequestMessageHandler)
  from listener responses
  (BrowserExtensionListenerResponseHandler) for clear
  separation of concerns and easier debugging.

- **Continuation-based router**: Uses Swift's async/await
with CheckedContinuation
  to handle the async nature of message routing between
  webviews without blocking threads or risking double-resume
  crashes.

- **Network topology**: BrowserExtensionNetwork tracks
webview relationships and
  enables proper message routing between background scripts,
  content scripts, and different extension contexts.

**Chrome API compatibility:** - Implements proper lastError
semantics (set lastError AND call callback with undefined) -
Supports async responses via `return true` from listeners -
Handles multiple listeners with first-response-wins behavior
- Maintains listener isolation between internal and external
messages - Proper exception handling in listeners doesn't
crash the system

**Error handling strategy:** - `noMessageReceiver` when no
listeners exist â†’ sets lastError, calls callback with
undefined - Listener exceptions are caught and logged but
don't prevent other listeners from running - Invalid message
encoding throws with detailed error messages for debugging -
Router prevents double-resume of continuations through
careful state management

**Testing approach:** - 14 comprehensive test cases covering
all edge cases including null/undefined handling - Real
WebKit JavaScript execution (not mocked) to ensure actual
browser compatibility - Tests verify both successful message
exchange and proper error conditions - Includes complex
message data, async responses, multiple listeners, and
exception scenarios

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-09: Add onMessage

2025-07-09: Add the send side of sendMessage

2025-07-09: Implement chrome.runtime.sendMessage with full
argument parsing support

- Added comprehensive argument parsing for all sendMessage
signatures:
  * sendMessage(message) * sendMessage(message, options) /
  sendMessage(extensionId, message) *
  sendMessage(extensionId, message, options)
- Modified VariableArgsFunction to always create callbacks
for Promise preparation
  * Fire-and-forget calls now use no-op callbacks to consume
  responses * Prepares for webextension-polyfill Promise
  support
- Added comprehensive test suite with real WKWebView
integration - All argument combinations and error cases
properly tested - Follows TDD approach: tests written first,
implementation follows

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-09: Lock things down

2025-07-09: Modify codegen for sendMessage

2025-07-09: Add code generation for chrome.* APIs

2025-07-09: Make id synchronous

2025-07-09: Add getPlatform. Improve security of callbacks

2025-07-09: Get an end to end test of adding a chrome api

2025-07-09: Lay out a new plan for attacking extension
support

2025-07-09: Remove dead docs

2025-07-09: Refactor webview creation into a new factory

2025-07-09: Fix leak of browser manager

2025-07-09: Correct offset by vmargin and by
per-pane-titlebar height of buttons

2025-07-04: Logging improvements. Make background service
webview always in view hierarchy and ping it once a second

2025-07-04: Get console.log working

2025-07-04: Add logging

2025-07-04: Remove test code from non-test sources

2025-07-04: Logging improvements, fix tests

2025-07-04: Tests are passing

2025-07-04: Improvements to background service

2025-07-04: Make extension ID a UUID

2025-07-04: Implement WKContentWorld separation for
background script isolation

- DOM nuke script runs in .page world to shadow DOM globals
- Extension background scripts run in .defaultClient world
for isolation - Added separate WKWebsiteDataStore per
extension for storage isolation - Added comprehensive
navigation/UI security delegates - Fixed DOM property
shadowing using Object.defineProperty instead of delete -
Added runtime validation and comprehensive test coverage

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-03: Implement BrowserExtensionBackgroundService for
background script execution

- Added BrowserExtensionBackgroundService protocol and
implementation - Background scripts run in hidden WKWebViews
with process isolation - Each extension gets its own
WKWebView instance - Support for ephemeral data stores for
incognito mode - Comprehensive test suite including
isolation tests - DOM nuke script implemented but disabled
due to execution timing issues

Note: testBackgroundScriptIsolation is occasionally flaky
due to script execution timing.  This will be addressed in a
future update.

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-03: Rename iTermProxy to iTermSwiftPackages since it
will be the build target where things that use swift
packages must go. This is because it's nearly impossible to
convert the rest of the code from a static lib (which cannot
use swift packages) to something else like a framework. The
net effect is that code may gradually migrate into this
package.

Add web extensions, a very very very experimental idea to
see if I can get extensions running in the browser. Link it
in and it basically works. Just set the advanced settings to
the path of an extension and the content script gets loaded.

2025-07-03: Fix Swift package problems in xcodebuild-driven
builds

2025-07-03: Fix some compilation errors in non debug builds

2025-07-02: Use numberValue for a change in CoreParse

2025-07-02: Rebuild deps with 16.4

2025-07-02: Bump adblock-rust

2025-07-02: Add proxy code

2025-07-02: Rebuild deps

2025-07-02: Modernize user notifications

2025-07-02: Remove unneeded use of deprecated api

2025-07-02: Use updated APIs for verifying python runtime
signature

2025-07-02: Try again, this time only disable signing for
proxy

2025-07-02: Revert "Turn off signing for proxy framework.
Make xcode stfu about breaking everything else with unneeded
signing changes"

This reverts commit
13a743158133779068117f2a45f5ddb203f8c273.

This caused a million errors about <> vs "" includes

2025-07-02: Don't use window frame color in arrangement
preview in settings

2025-07-02: Turn off signing for proxy framework. Make xcode
stfu about breaking everything else with unneeded signing
changes

2025-07-02: Fix deprecation warnings

2025-07-02: Fix selection highlight for status bar setup
items

2025-07-02: rm dead code

2025-07-02: Fix selection effect for create script buttons

2025-07-02: Fix selection effect for create script buttons

2025-07-02: Fix some deprecation warnings

2025-07-02: Fix some deprecation warnings

2025-07-02: Fix some deprecation warnings

2025-07-02: Fix more deprecation warnings

2025-07-02: Fix more deprecation warnings

2025-07-02: Fix more deprecation warnings

2025-07-02: Fix deprecation warnings

2025-07-02: Fix some deprecation warnings

2025-07-02: Sandbox check for xcode version

2025-07-02: Fix some warnings, sandbox run scripts, and
remove ld_classic.

2025-07-02: Fix deprecations in SignedArchive

2025-07-02: Add proxy files that I missed earlier

2025-07-02: Bump deployment target to macOS 12, rebuild deps

2025-07-02: Bump version to 3.6.x

2025-07-02: Refactor conductor to deal with sendable
problems

2025-07-02: Fix a bunch of warnings

2025-07-02: Make url bar look nice with a focus ring. Fix a
bug where completionswindows were moved to the wrong screen
if not originally on the main screen

2025-07-02: Banish auto layout

2025-07-02: Persist named marks

2025-07-02: Add polish to named marks in browser

2025-07-02: Show activity indicator in browser tabs while
loading

2025-07-02: Make favicon draggable

2025-07-02: Fix title and favicon for file URLs

2025-07-02: Cmd-click to invoke first smart selection action
in browser

2025-07-02: Context menu for browsers

2025-07-02: Add helpful synonyms to browser context menu

2025-07-02: Refactor context menu in webview

2025-07-02: Support multiple filter lists for advanced
adblocking

2025-07-02: Get proxy working.

2025-07-02: Rebuild deps for xcode 16.4

2025-07-02: Add rust-adblock

Change adblock-rust submodule to point at my fork with C ffi
and static library target

2025-07-02: Use gray for dimming

2025-07-02: Add focus follows mouse to browser

2025-07-02: Make browser first responder when adding it

2025-07-02: Add support for proxies

2025-07-02: Show adblock stats in settings, fix coordinates
for click to hide and add named mark. Swap ok and cancel
buttons in edit tags for bookmarks window

2025-07-02: Implement smart element removal for
distraction-free browsing

Rather than entering distraction removal mode, the
removeElement method now directly removes elements at a
specified point. Key improvements:

- Smart ad detection: Identifies ad containers using
class/ID patterns - Size-aware traversal: Walks up DOM tree
until finding 10%+ size increase - Targeted removal: Only
removes the specific ad container, not page content -
Aggressive hiding: Uses multiple CSS properties to ensure
stubborn ads disappear - Backdrop skip: Avoids removing
large page containers in targeted mode

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-02: Add context menu item to remove an element

2025-07-02: Advanced paste for browser, plus paste
keybinding actions

2025-07-02: Fix moving browser to split pane bug

2025-07-02: Dim browser views

2025-07-02: Exclude incompatible items from the key bindings
menu for browser profiles

2025-07-02: Add a note to settings about /dev/null  mode.
Set undo timeout to zero in it.

2025-07-02: Add toolbar button to indicate /dev/null mode

2025-07-02: restrict status bar components by profile type

2025-07-02: Add named mark support to the browser

2025-07-02: Fix double click followed by drag in webview

2025-07-02: Use safari's UA

2025-07-02: Add auto fill and fix some bugs with related
webviews double-setting user content handlers

2025-07-02: Get basic autofill working

2025-07-02: Don't allow browsers to be split panes in the
same tab as a tmux client

2025-07-02: Add URL hover preview support with scroll
handling

Implements URL hover preview functionality for browser mode
by adding JavaScript event delegation to detect link hovers
and proper coordinate conversion to display previews in
SessionView.

Key features: - JavaScript hover detection with secure
message passing - Coordinate conversion from WebView to
SessionView - Scroll event handling to clear hover when
links move - Throttled scroll handling to maintain
performance - Uses existing SessionView hover infrastructure

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-02: Improve URL bar focus behavior for Cmd-L

When pressing Cmd-L to focus the URL bar, if it's already
focused, select all text instead of doing nothing. This
matches standard browser behavior where Cmd-L always results
in selected text.

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-02: Make esc replace the url bar's contents with the
current URL

2025-07-02: Ensure url completions window is closed when web
tab is closed

2025-07-02: Make operations that would write to PTYSession
(e.g., hitting send in composer) write to the webview

2025-07-02: Add dragdrop-demo

2025-07-02: Add copy-on-select support to browser feature

Implements copy-on-select functionality for the browser
WebView that honors the kPreferenceKeySelectionCopiesText
preference. When enabled, text selections are automatically
copied to the clipboard and saved to pasteboard history on
mouseUp and smart selection events.

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-02: Add a test of clipboard functionality

2025-07-02: Add test of indexed db

2025-07-02: Add /dev/null mode for private browsing

2025-07-02: Make settings search work well with profile
types. Switch profiles to reveal a type-specific setting.
Remove browser items from search when browser mode not
enabled

2025-07-02: Shift session name over and remove the lock
button in edit sessions when in browser mode

2025-07-02: Offer to open URLs locally

2025-07-02: Remove terminal-only keys from session profile
when it becomes a browser just to avoid weird untested code
paths - now all these things just use the default values

2025-07-02: Set preferredContentSize of the regex
visualization vc properly so we can scroll

2025-07-02: Bring back smart selection settings for browser
profiles

2025-07-02: Get smart selection pointer action working

2025-07-02: Implement QuickLook for web media with
progressive downloads

- Add MimeTypeUtilities shared class for MIME type to
extension mapping - Update BrowserPageSaver to use shared
utility - Enhance QuickLookHelper with progressive file
addition and download capabilities - Implement
actionPerformingOpenQuickLook for immediate QuickLook
display - Support parallel downloads that add files to open
QuickLook panel - Add download cancellation when QuickLook
panel is closed - Move all download logic to QuickLookHelper
for better separation of concerns

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-02: Minor cleanup

2025-07-02: Implement WKWebView coordinate-based
interactions

- Add coordinate conversion method accounting for pageZoom
and magnification - Implement
extendSelection(toPointInWindow:) with proper document order
logic - Implement openLink(atPointInWindow:inNewTab:) for
opening links at coordinates - Implement
text(atPointInWindow:radius:) for extracting surrounding
text - Implement performSmartSelection with smart selection
rules - Implement urls(atPointInWindow:) for QuickLook media
detection - Fix actionPerformingOpenContextMenu by sending
synthetic mouse events directly to WKWebView - Create
JavaScript templates for all coordinate-based operations -
Add comprehensive coordinate debugging tools and test page

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-02: Get extend selection working

2025-07-02: WIP

2025-07-02: Restrict profile types to choose from in key
actions and general actions to the legal type when possible

2025-07-02: Fix a todo

2025-07-02: Move deferred interaction state restoration into
the WKebView subclass

2025-07-02: Fix a bug where we returned the wrong
interaction state for a deferred browser

2025-07-02: Fix more bugs in moving around settings views
for enclosures. Completely lose my shit at print() and
NSLog() for throwing away debugging data.

2025-07-02: Add UI to set default browser profile

2025-07-02: Add open quickly support for bookmarks and url
queries

2025-07-02: Add profileIsTerminal, expose to PTYTextView to
avoid opening advanced settings in browsers

2025-07-02: Prevent changing color presets for browsers from
open quickly

2025-07-02: Develop the concept of profile types. Limit
profile types in profile list view. Apply the limit to the
profile switcher in edit session

2025-07-02: Remvoe password manager setting from browser
profiles

2025-07-02: Simplify how we hide views depending on
configuration. Fixes a bug with the hotkey window settings,
which were manually hidden at an inopportune time

2025-07-02: Get key bindings barely working with browser

2025-07-02: Hide opaque background color setting in browser
profiles

2025-07-02: Fix colors prefs in browser profilse

2025-07-02: Hook up browser page zoom to settings

2025-07-02: Make search engine configurable

2025-07-02: Add search engine configuration to browser
settings

- Add search engine selection dropdown with Google,
DuckDuckGo, Bing, and Kagi options - Add custom search URL
input field for user-defined search engines - Implement
secure session-based communication between frontend and
backend - Add validation for custom search URLs to ensure %@
placeholder is present - Update iTermBrowserSettingsHandler
to handle search command messages - Add setSearchCommand
method to iTermAdvancedSettingsModel

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-02: Handle slow search suggestions more gracefully

2025-07-02: Add support for search suggestions in URL bar

2025-07-02: Make the url bar wide

2025-07-02: Distraction removal started

2025-07-02: Improve url bar suggestion truncation

2025-07-02: Add ask ai. Fix some locking bugs now that there
are multiple databases

2025-07-02: WIP: Add Reader Mode support with Readability.js
integration

- Add Reader Mode menu item above Add Bookmark with dynamic
text - Integrate Readability.js UMD build for article
parsing - Add reader mode JavaScript implementation with
styling - Update toolbar delegate to support reader mode
toggle

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-02: Implement deferred loading for WKWebViews during
session restoration

- Add iTermSessionRestorationStatusProtocol to track
restoration state - Make PseudoTerminal conform to protocol
with restoration counter - Add deferred loading logic to
browser view controller for both URL loading and interaction
state - Post notification when restoration completes to
trigger deferred loading - Load deferred content when view
becomes visible or restoration completes - Improves startup
performance by avoiding concurrent WKWebView loading during
restoration

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-02: Implement target="_blank" links opening in tabs
instead of new windows

- Added configurable behavior with openTargetBlankInWindow
flag (currently false) - Implemented
PseudoTerminal.openTab() method for browser sessions with
WKWebViewConfiguration support - Modified PTYSession+Browser
to use tab opening by default for target="_blank" links -
Preserved window opening option for future configurability -
Fixed URL passing to use KEY_INITIAL_URL for proper browser
session initialization - Added proper session creation with
configuration and profile inheritance

This improves user experience by keeping related browsing
within the same window while maintaining the option to
switch back to window behavior via configuration.

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-02: Fix browser links with target="_blank" opening
welcome page instead of target URL

The issue was that new browser windows were storing the
target URL in KEY_COMMAND_LINE but browser session
initialization was reading from KEY_INITIAL_URL, causing new
windows to always open the default welcome page.

Fixed by changing the profile key from KEY_COMMAND_LINE to
KEY_INITIAL_URL in openSingleUserBrowserWindowWithURL method
so the target URL is properly passed to the new browser
session.

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-02: Implement enhanced view source feature with
syntax highlighting and clickable URLs

- Fetch original HTML source from network instead of
processed DOM to preserve exact formatting - Add
comprehensive syntax highlighting with GitHub-style
light/dark mode support - Implement regex-based URL
detection to make URLs clickable while preserving source
integrity - Preserve original tabs with CSS tab-size
property instead of converting to spaces - Support both
relative and absolute URLs with proper resolution - Add
professional styling with monospace fonts and custom
scrollbars - Remove external dependencies for security and
reliability - Gracefully fallback to DOM source if network
fetch fails

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-02: Fix a bug where snippets tool buttons weren't
enabled on selection

2025-07-02: Fix page saving to preserve original page
integrity with DOM cloning

Resolves critical bug where images would disappear from the
original page after saving by implementing DOM cloning
instead of modifying the live document.

Key Changes: - Replace direct DOM modification with
document.cloneNode(true) approach - Apply all data-saved-*
attribute processing to the cloned DOM only - Preserve
original page functionality while generating offline-ready
saved version - Add comprehensive unit test to verify
original page remains intact

Technical Implementation: - Clone entire document before
applying saved resource references - Process CSS inlining,
URL rewriting, and resource substitution on clone - Extract
final HTML from processed clone, leaving original untouched
- Maintain data-saved-* attributes as harmless metadata on
live page

Test Coverage: - Added testOriginalPageRemainsIntact() with
functional integrity checks - Verify image sources, page
title, CSS links remain unchanged - Confirm saved version
has local resource references while original has server URLs
- Validate images remain visible and functional after saving
operation

File Organization: - Moved page saving components to
dedicated Browser/Page Saver/ directory - Relocated context
menu handler to Browser/UI/ for better organization -
Updated context menu text for consistency (Save Page Asâ€¦,
Printâ€¦)

This ensures users can save pages without breaking the
original browsing experience.

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-02: Add comprehensive browser page saving
functionality with full test suite

Implements complete "Save Page As" functionality for the
iTerm2 browser with extensive testing coverage:

Core Features: - Page saving with resource downloading (CSS,
JS, images, fonts) - CSS inlining with URL rewriting for
offline viewing - DOCTYPE preservation to maintain layout
fidelity - Resource management with proper local path
references - Graceful handling of failed resources and
network errors

Technical Implementation: - Non-destructive DOM manipulation
using data-saved-* attributes - Async/await throughout with
proper WebKit main actor isolation - CSS URL extraction and
rewriting for nested resources - Comprehensive MIME type to
file extension mapping - Context menu integration with
save/print/copy operations

Test Suite (11 comprehensive tests): - Basic functionality:
page saving, DOCTYPE, CSS inlining, resource handling - Edge
cases: empty pages, broken links, network failures - Complex
scenarios: nested CSS imports, multiple backgrounds, iframes
- Performance benchmarks and error handling validation -
HTTP server simulation for realistic testing

The page saving functionality ensures saved pages work
offline with all resources properly referenced locally,
maintaining visual and functional fidelity.

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-02: Reorg files

2025-07-02: Add bookmark tag editor with improved filtering
and autocomplete

- Create NSPanel-based tag editor for bookmarks with
NSTokenField - Fix tag filtering to show intersection (ALL
tags) instead of union (ANY tags) - Resolve race condition
in bookmark manager initialization - Add prefix-based
autocomplete with localizedCaseInsensitiveHasPrefix -
Implement auto-close on navigation and escape key - Add
retry logic for robust tag/bookmark loading - Use delegate
pattern to avoid dependency cycles

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

2025-07-02: Make password manager send user name and
password when possible and add password-demo

2025-07-02: Add password manager button to password fields

2025-07-02: Add claude settings

2025-07-02: Add permissions page to settings

2025-07-02: Add media permissions

2025-07-02: Add geolocation

2025-07-02: Fix about oopsie

2025-07-02: Add static page handling and notification
permission handling

2025-07-02: Welcome page

2025-07-02: Rework local pages. Make db access stick to one
thread. actors have already screwed me

2025-07-02: Hide profile mode by default

2025-07-02: Get hiding/showing prefs to work

2025-07-02: Prepare for BrowserModeEnclosure

2025-07-02: Update settings when profile type changes
to/from browser

2025-07-02: Favicon setting

2025-07-02: Fix up edit session in browser mode

2025-07-02: Hide irrelevant settings for browser profiles

2025-07-02: Make prompt before closing a popup instead of
radio buttons

2025-07-02: Wrap controls in settings in optional enclosures
so they can be hidden for browser profiles

2025-07-02: Fix wrong spacing in prefs

2025-07-02: Send javascript console messages to debug log
and system log

2025-07-02: Cmd click to open in tab, cmd-opt-click to open
in vertical split, cmd-opt-shift-click to open in horizontal
split

2025-07-02: Clean up css

2025-07-02: Visual improvements for settings

2025-07-02: Add title to visits

2025-07-02: dedup css and add title to browser visits

2025-07-02: Style improvements for internal pages

2025-07-02: Add history to browser menu, fix duplicate date
label bug

2025-07-02: Don't make hidden PTYTextView doesn't become
first responder. Add mainResponder to PTYSession for this
purpose.

2025-07-02: Fix hidden text view becoming first responder

2025-07-02: Show web menu when browser is current

2025-07-02: Password manager

2025-07-02: Support magnification

2025-07-02: Fix printing, add webview to responder chain

2025-07-02: Make url bar smaller and centered

2025-07-02: Browse history  UI

2025-07-02: Fetch adblock json directly

2025-07-02: Refactor favicon

2025-07-02: refactor browser code

2025-07-02: Make browser db async

2025-07-02: URL suggestions based on visit history

2025-07-02: Add browser db

2025-07-02: Reorg some database code

2025-07-02: State restoration

2025-07-02: All adblock tests pass and it works at runtime

2025-07-02: Adblocker improvements

2025-07-02: Add all the files

2025-07-02: Getting close to adblock working

2025-07-02: Infer search from URL

2025-07-02: More URL bar improvements

2025-07-02: Disable back and forward buttons when there is
nowhere to go

2025-07-02: View source

2025-07-02: File uploads

2025-07-02: Downloads

2025-07-02: Add browser search

2025-07-02: Fix favicon size

2025-07-02: Multi hop navigation by long press back/forward

2025-07-02: Fix popups

2025-07-02: Favicons and titles

2025-07-02: Settings improvements

2025-07-02: Add settings

2025-07-02: Send queries to search

2025-07-02: Load initial URL

2025-07-02: Refactor, improve error handling

2025-07-02: Handle errors

2025-07-02: Add stop button

2025-07-02: Add browser

2025-07-02: Show deprecation warning

2025-06-17: Delay send text on start until window finishes
entering fullscreen. Issue 12313

2025-06-17: Add support for Anthropic's API

2025-06-17: Fix crash when right clicking in a text field in
settings that isn't bound to a preference control. For
example, text fields adjacent to sliders.

2025-06-16: Fix relative timestamps in GPU renderer

2025-06-16: Fix wrong url

2025-06-16: Update libsixel submodule url

2025-06-16: Don't allow 'move pane to tab' when it's already
going. Issue 12302

2025-06-16: Make various parts of chat and chat completions
responses optional. See PR 518

2025-06-16: Make ssh file panel work non-modally

2025-06-16: Add quicklook support to the ssh file panel

2025-06-16: Exclude localhost from the download files panel

2025-06-16: Implement search in SSHFilePanel

2025-06-16: Fix duplicate menu item identifier

2025-06-15: Add 'Download Files' under ssh menu

2025-06-15: Fix it2dl over ssh integration

2025-06-14: Better logging for window resizing

2025-06-14: Fix bugs with default margin color

2025-06-14: Don't claim a margin color when it's set to the
default value.

2025-06-14: Fix a bug where changing the window style to
maximized or normal would break the window style control in
settings. Issue 12306

2025-06-14: Fix a bug where the tab activity indicator spun
on ssh integration sessions due to inband signaling. Issue
12309

2025-06-14: Extend dominant background color into the
margins. In minimal theme, extend it to all the window
chrome. Issue 12310

2025-06-14: Add windsurf to editors. Issue 12311

2025-06-14: Add debug logging for it_titleBarDoubleClick

2025-06-14: Add /A to open quickly to open arrangment in
tabs. Issue 12301

2025-06-14: Fix a discrepancy between legacy and gpu
renderers. GPU drew timestamps where the offscreen comman
dline would be even if it were not there.

2025-06-13: Fix a bug where the find indicator could have
the wrong background color (processing the bg color got
crazy result because the default bg color in the color map
used by TextClipDrawing was uninitialized)

2025-06-13: When not synchronizing the find pasteboard, do
not write to it. See mailing list thread with subject 'Re:
[iterm2-discuss] Search widget automatically grabbing
clipboard contents'

2025-06-13: Fix some llama bugs

2025-06-13: Cleanup

2025-06-13: Automatic ai model updating

2025-06-13: AI settings migration

2025-06-12: Mess with file upload stuff

2025-06-12: Don't allow uploading unsupported files

2025-06-12: Get deep seek working

2025-06-12: Get gemini working, update list of models

2025-06-10: Add support for Responses API, attachments in AI
chat, and just starting to use vector storage.
